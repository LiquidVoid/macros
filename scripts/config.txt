{
  "colours": {
    "variable": {
      "default": "&9", 
      "global": "&1"
    }, 
    "text": {
      "default": "&7", 
      "highlight": "&f", 
      "enable": "&a", 
      "disable": "&c"
    }
  }, 
  "remote": {
    "weather": "http://api.openweathermap.org/data/2.5/weather", 
    "http": "http://dev.lordzeel.com/minecraft/remote/client.php"
  }, 
  "user": {
    "default": {
      "ranks": {
        "SP": 3, 
        "localhost": 3
      }, 
      "weather": {
        "units": "Imperial", 
        "location": "District of Columbia", 
        "language": "English"
      }
    }, 
    "MegaSniperB": {
      "ranks": {
        "connect1.minetime.com": 0, 
        "SP": 2, 
        "localhost": 3, 
        "noobstown.com": 1
      }, 
      "weather": {
        "units": "Imperial", 
        "location": "Stow, Ohio", 
        "language": "English"
      }
    }, 
    "A6776": {
      "ranks": {
        "connect1.minetime.com": 0, 
        "noobstown.com": 1
      }, 
      "weather": {
        "units": "Imperial", 
        "location": "Akron, Ohio", 
        "language": "English"
      }
    }, 
    "zeel01": {
      "ranks": {
        "connect1.minetime.com": 0, 
        "SP": 2, 
        "localhost": 3, 
        "noobstown.com": 2
      }, 
      "weather": {
        "units": "Imperial", 
        "location": "Akron, Ohio", 
        "language": "English"
      }
    }
  }, 
  "server": {
    "default": {
      "commands": {
        "spawn": "/spawn", 
        "money": null, 
        "safehome": null, 
        "home": "/home"
      }, 
      "kits": null, 
      "chat": {
        "blocked": [
          "(\\* |-)?[A-Za-z0-9_]{3,16} (joined|left|is (no longer|now) AFK)\\.?", 
          "Available kits':' No kits available", 
          "Giving kit [A-Za-z0-9_]+ to (\\%@&server_groups_trusted\\%|\\%@&server_groups_friend\\%)", 
          "Request sent to ([A-Za-z0-9_]{3,16})\\.", 
          "Teleport(ation|ing\\.{3})? (will commence in ([0-9]+) seconds\\. Don't Move\\.|commencing\\.\\.\\.|Teleport Woosh!)", 
          "That ore smelted itself!", 
          "This ([A-Za-z0-9_]+) is locked with a magical spell", 
          "This request will timeout after ([0-9]+) seconds\\.", 
          "To (teleport|deny this request)\\, type /tp(accept|deny)\\.", 
          "You are in a no-PvP area\\.", 
          "You are not permitted to enter this area\\.", 
          "You can only sleep at night", 
          "You don't have permission for this area\\.", 
          "You have no new mail\\.", 
          "\\*\\*YOU (READY|LOWER) YOUR (HOE|AXE|PICKAXE|FISTS|SWORD|SHOVEL)\\*\\*", 
          "\\[(TIP!|Vote|PVP)\\] (.+)", 
          "\\[LOTTERY\\] Draw in\\: (( and ){0,1}([0-9]{1,2} (year|day|hour|minute|second)(s|,){0,2})){0,5}", 
          "\\[[A-Za-z0-9_]+\\] You are not taking part in PVP right now\\.", 
          "\\[[A-Za-z0-9_]+\\] You visited the ([A-Za-z0-9_]+) World and changed your chat accordingly\\.", 
          "http(s)?':'//(minecraftservers|minecraft-server-list|planetminecraft)\\.(org|com|net)(/[A-Za-z0-9]+)*/vote(/[A-Za-z0-9]+)*"
        ], 
        "log": [
          "((-|\\+|\\$)+?([0-9]{0,3}(\\.|,)?)+[0-9]{0,2}).?(has been (sent to|received from) [A-Za-z0-9_]{4,16}\\.)?", 
          "([A-Za-z ]+) has worn off for ([A-Za-z0-9_]{4,16})", 
          "([A-Za-z0-9_ ]+) unregistered\\.", 
          "([A-Za-z0-9_]{4,16}) accepted your teleport request\\.", 
          "([A-Za-z0-9_]{4,16}) has requested that you teleport to them\\.", 
          "([A-Za-z0-9_]{4,16}) has used ([A-Za-z ]+)!", 
          "Bed spawn set!", 
          "Created a [A-Za-z0-9_ ]+ successfully", 
          "Kits':'( [A-Za-z0-9_]+)+", 
          "Mail sent!", 
          "Now chatting in ([A-Za-z0-9_ ]+)\\.", 
          "Pending teleportation request cancelled\\.", 
          "Received kit [A-Za-z0-9_ ]+\\.", 
          "Right\\-click again to confirm Repair\\. Left-click to cancel\\.", 
          "Something doesn't semm quite right\\.{3}", 
          "Teleport request accepted\\.", 
          "That felt easy\\.", 
          "The luck of Hyrule is with you today!", 
          "Treasure found!", 
          "Warping to ([A-Za-z0-9_]+)\\.", 
          "You are too tired to use that ability again\\. \\([0-9]*s\\)", 
          "You have joined (.+)\\.", 
          "You have placed an anvil, anvils can repair tools and armor\\.", 
          "You need more ([A-Za-z]+)", 
          "Your (.+) ability is refreshed!", 
          "\\*\\*(.+) (has worn off|ACTIVATED)\\*\\*", 
          "\\*\\*(ENEMY BLEEDING|Rolled|Dodged)\\*\\*", 
          "\\*\\*([A-Za-z0-9]+) ([A-Za-z0-9_]{4,16}) created a new faction ([A-Za-z0-9]+)", 
          "\\[Broadcast\\] (.+)"
        ], 
        "allowed": [
          "(From|To)':' [A-Za-z0-9_]{4,16} (.+)", 
          "\\[L\\](.+)"
        ]
      }, 
      "groups": {
        "enemy": [
          "iShowClass", 
          "Brob217"
        ], 
        "friend": [
          "Jman6776", 
          "Midnight301", 
          "Gingolicous", 
          "GirlKitty5"
        ], 
        "trusted": [
          "MegaSniperB", 
          "zeel01", 
          "A6776"
        ], 
        "staff": [
          "Notch", 
          "Jeb_", 
          "Dinnerbone"
        ]
      }, 
      "permissions": {
        "default": 1, 
        "ranks": [
          "help|\\\\?|me|tell|message|msg|w|trigger", 
          "kit|warp|home|spawn|tpa|tp(accept|deny)|p|ch(annel)?|inspect|mcstats|mcrank|mctop|wild|town|shop|list|ticket|ignore|helpop|lwc|unlock|lock|c(info|password|modify|persist)|party|seen|menu|sethome|delhome|bal(ance)?", 
          "achievement|blockdata|clear|clone|debug|defaultgamemode|difficulty|effect|execute|fill|gamemode|gamerule|give|kill|particle|playsound|publish|say|scoreboard|seed|setblock|setworldspawn|spawnpoint|spreadplayers|summon|tellraw|testfor|testforblock|testforblocks|time|title|toggledownfall|tp|weather|worldborder|xp", 
          ".+"
        ], 
        "teleportation": "warp|home|spawn|tpa|wild|jump|tp"
      }
    }, 
    "noobstown.com": {
      "commands": {
        "spawn": "/warp spawn", 
        "money": "/balance", 
        "safehome": "/wild chunks home", 
        "home": "/home"
      }, 
      "kits": {
        "food": {
          "time": 620, 
          "permission": 1
        }
      }, 
      "chat": {
        "blocked": [
          "-+ Motd -+ Page [0-9]+/[0-9]+ -+", 
          "Any x-raying will be found and will result in a permanent ban\\.", 
          "Be aware we are performing strict checks on all mining\\.", 
          "You (have left|are not in) (Local|Town|Mine|Wilderness|Global)\\.", 
          "You can't sell ([A-Za-z0-9]+) for another ([0-9]+)\\+ hours\\.", 
          "You must have ([0-9]+)x ([A-Za-z0-9_]+) \\(ID. ([0-9]+), data value. (any|([0-9]+))\\) for this\\.", 
          "\\[Wild\\] You can't do that here\\. Type /wild\\.", 
          "\\[Wild\\] You just created a double chest which clears any previous unit settings which may have set with the original chest\\.", 
          "\\[[A-Za-z0-9_]+\\] Please welcome ([A-Za-z0-9_]{3,16}) /warp welcome", 
          "\\[[A-Za-z0-9_]+\\] Sold x([0-9]+) (.+) at a value of ([0-9]+) Nbz", 
          "~ If you need help use /ticket", 
          "~ Players online Noobstown':' ([0-9]+)", 
          "~ Remember to read our /rules", 
          "~(\\%@&server_groups_trusted\\%|\\%@&server_groups_friend\\%)", 
          "~Unowned"
        ], 
        "log": [
          "(Summon|Dismiss)ed ([A-Za-z0-9_]{3,16})", 
          "([0-9]+) seconds to map selection!?", 
          "([A-Za-z0-9_ ]+) wandered off and was dismissed", 
          "([A-Za-z0-9_]{3,16}) was the last man standing!", 
          "You are summoning ([A-Za-z0-9_]+)\\. Wait ([0-9]+) seconds", 
          "You have to have an active horse to dismiss one", 
          "\\[Noobstowny\\] (.+)", 
          "\\[Wild\\] Success, you were teleported to your land\\.", 
          "\\s?~(\\s?|(\\(|\\[|\\{)?[A-Za-z0-9_\\s':']+(\\)|\\]|\\})?|\\s-\\s)+"
        ], 
        "allowed": [
          ".{2}(\\%@&server_groups_trusted\\%|\\%@&server_groups_friend\\%|\\%@&server_groups_staff\\%) (joined|left|is (no longer|now) AFK)\\."
        ]
      }, 
      "groups": {
        "enemy": null, 
        "friend": [
          "Chompertons"
        ], 
        "trusted": null, 
        "staff": [
          "AQW_Assassian01", 
          "AdrianCavi", 
          "DadJaeger", 
          "Duelcon", 
          "Fatnoob", 
          "ItsLawrence", 
          "Jackmwoodall14", 
          "MsManifestation", 
          "Waterworth", 
          "doc_engie", 
          "gamergirlxo", 
          "nebih"
        ]
      }, 
      "permissions": {
        "default": 1, 
        "ranks": [
          "help|me|tell|message|msg|w|trigger", 
          "kit|bal(ance)?|warp|home|spawn|tpa|wild|tp(accept|deny)|p|ch(annel)?|inspect|mcstats|mcrank|mctop|wild|town|shop|list|ticket|ignore|helpop|plot|horse(s)?|pet|lwc|unlock|lock|c(info|password|modify|persist)|party|seen|menu|sethome|delhome", 
          "jump|e.*chest|craft|book|compass|coords|clearinventory|back|tpahere", 
          "vipshop", 
          "achievement|blockdata|clear|clone|debug|defaultgamemode|difficulty|effect|execute|fill|gamemode|gamerule|give|kill|particle|playsound|publish|say|scoreboard|seed|setblock|setworldspawn|spawnpoint|spreadplayers|summon|tellraw|testfor|testforblock|testforblocks|time|title|toggledownfall|tp|weather|worldborder|xp", 
          ".+"
        ], 
        "teleportation": "warp|home|spawn|tpa|wild|jump|town spawn"
      }
    }, 
    "SP": {
      "commands": {
        "spawn": null, 
        "money": null, 
        "safehome": null, 
        "home": null
      }, 
      "kits": null, 
      "chat": {
        "blocked": null, 
        "log": null, 
        "allowed": null
      }, 
      "groups": {
        "enemy": null, 
        "friend": null, 
        "trusted": null, 
        "staff": null
      }, 
      "permissions": {
        "default": 0, 
        "ranks": [
          "help|\\\\?|me|tell|message|msg|w|trigger", 
          "achievement|blockdata|clear|clone|debug|defaultgamemode|difficulty|effect|execute|fill|gamemode|gamerule|give|kill|particle|playsound|publish|say|scoreboard|seed|setblock|setworldspawn|spawnpoint|spreadplayers|summon|tellraw|testfor|testforblock|testforblocks|time|title|toggledownfall|tp|weather|worldborder|xp", 
          ".+"
        ], 
        "teleportation": "tp"
      }
    }, 
    "connect1.minetime.com": {
      "commands": {
        "spawn": "/spawn", 
        "money": "/balance", 
        "safehome": null, 
        "home": null
      }, 
      "kits": null, 
      "chat": {
        "blocked": [
          "([A-Za-z0-9_]{3,16}) just ROFLSTOMP'd ([A-Za-z0-9_]{3,16}) \\[x([0-9]+)\\]", 
          "Be careful, the main plaza has PvP enabled!", 
          "Chat is disabled in the lobby\\.", 
          "Check out our custom Skywars plugin\\.", 
          "Choose a server by walking into its portal\\.", 
          "Click the links below to vote!", 
          "Do you have what it takes to escape\\?", 
          "Purchase ranks at buy\\.minetime\\.com.", 
          "Rank up faster by voting with /vote\\.", 
          "Ranks transfer to all servers\\.", 
          "Welcome ([A-Za-z0-9_]{3,16}) to PvpFest! Use /kit fight\\.", 
          "Welcome to Minetime, enjoy the view!", 
          "\\[(Infected|Minetime|PvpFest|PvPTimer|Prison)\\] (.+)", 
          "\\[Server\\] We have added voting! Go to /warp vote\\. /rewards for our lucky votes\\.", 
          "\\[[A-Za-z0-9_]+\\] Player ([A-Za-z0-9_]+) has been eliminated!", 
          "\\[[A-Za-z0-9_]+\\] Use /sw kit <name> to pick a kit\\."
        ], 
        "log": [
          "([0-9]+) seconds to map selection!?", 
          "([A-Za-z0-9_]{3,16}) was the last man standing!", 
          "You just wrecked ([A-Za-z0-9_]{3,16}) hardcore!\\[\\+([0-9]+)\\]", 
          "You've been weakend!", 
          "\\[Portal\\] This server is currently offline\\. Try again later!", 
          "\\[[A-Za-z0-9_]+\\].{1,2}([0-9]+) more players are needed before the game starts", 
          "\\[[A-Za-z0-9_]+\\].{1,2}([0-9]+) player\\(s\\) remain!", 
          "\\[[A-Za-z0-9_]+\\].{1,2}([A-Za-z0-9_]+) has (joined|left) the game \\(([0-9]+)/([0-9]+)\\)", 
          "\\[[A-Za-z0-9_]+\\].{1,2}Game starting in ([0-9]+) seconds!", 
          "\\[[A-Za-z0-9_]+\\].{1,2}You have been eliminated\\. Better luck next time!"
        ], 
        "allowed": [
          ".{2}(\\%@&server_groups_trusted\\%|\\%@&server_groups_friend\\%|\\%@&server_groups_staff\\%) (joined|left|is (no longer|now) AFK)\\."
        ]
      }, 
      "groups": {
        "enemy": null, 
        "friend": [
          "notchs5"
        ], 
        "trusted": null, 
        "staff": [
          "sawine", 
          "Dragoness", 
          "Darkpsy", 
          "Lomanic", 
          "DanniDorrito", 
          "Darth Android", 
          "Deus Lemmus", 
          "Sayomie", 
          "EliteCatalyst", 
          "XCoaster", 
          "MasterJack", 
          "Danny", 
          "Grifff", 
          "Hayden775", 
          "HolySm0kes", 
          "Neil the Ninjargh", 
          "WhatItDo", 
          "Zionia", 
          "8x8johan", 
          "AlecMcKinley", 
          "Keval", 
          "Nanakisan", 
          "ohten40oz", 
          "RavensDragon", 
          "Vexed_Vixxen", 
          "xk_cortex", 
          "xMoralThreat", 
          "zdeathclock", 
          "bugans1", 
          "waffletastic", 
          "leronzadok", 
          "dzoumaya", 
          "jc199710", 
          "Lochiechoccie", 
          "nbc0711", 
          "YouFoundMe", 
          "Jared", 
          "Novaleigh", 
          "Pljz", 
          "ronvandorp", 
          "sydneya11", 
          "Alyysia", 
          "ebay269", 
          "Hagan", 
          "kutha1", 
          "Luggious", 
          "pyrefangs", 
          "savage1106", 
          "smilingkate", 
          "Insert", 
          "MischievousGrins", 
          "Tman_103"
        ]
      }, 
      "permissions": {
        "default": 0, 
        "ranks": null, 
        "teleportation": "warp|home|spawn|tpa|wild|jump"
      }
    }
  }
}